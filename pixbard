#!/usr/bin/env ruby

load "#{ENV['HOME']}/.pixbard"

require 'socket'
Thread.abort_on_exception = true

class Color
  attr_reader :r, :g, :b
  def initialize(r, g, b)
    @r, @g, @b = [r, g, b]
  end
  def self.from_s(s)
    if s.length != 6
      raise Exception.new("color string must be of length 6")
    end
    Color.new(*(0..2).map{|i| Integer(s[i*2..(i+1)*2-1], 16)})
  end
end

class Line
  def initialize(length)
    @line = Array.new(length*3, 0)
  end
  def set(pos, len, color)
    @line[pos*3..(len+pos)*3-1] = ([color.b,color.g,color.r].map{|v|Integer(v)}) * len
  end
  def to_s()
    @line.pack("C*")
  end
end

class PixBar
  def initialize(pixbar, x, y, width, length, edge)
    @pixbar = IO.popen([pixbar,x,y,width,length,edge].map{|v|v.to_s}, 'r+')
  end
  def set_line(line)
    @pixbar.write line
  end
end

class Segment
  attr_reader :start, :length
  def initialize(states, start, length)
    @states, @start, @length = [states, start, length]
  end
  def state(name); @states[name]; end
end

colors = COLORS.map{|name, str| [name, Color.from_s(str)] }.to_h
leftover = LENGTH % SEGMENTS.size
segment_lengths = [LENGTH/SEGMENTS.size] * SEGMENTS.size
(0...leftover/2).each do |i|
  segment_lengths[i] += 1
  segment_lengths[SEGMENTS.size-i-1] += 1
end
segment_lengths[SEGMENTS.size/2] += 1 if leftover % 2 == 1
segments = {}
pos=0
SEGMENTS.zip(segment_lengths).each do |(name, states_defn), length|
  states = {}
  states_defn.each do |state_name, state_color_name|
    color = colors[state_color_name]
    raise Exception.new("no such color #{state_color_name}") if !color
    states[state_name] = color
  end
  segments[name] = Segment.new(states, pos, length)
  pos += length
end

pixbar = PixBar.new(PIXBAR, X, Y, WIDTH, LENGTH, EDGE)
line = Line.new(LENGTH)

server = UNIXServer.new SOCKET_PATH
at_exit { File.delete SOCKET_PATH }
queue = Queue.new
Thread.new do
  loop do
    socket = server.accept
    Thread.new do
      socket.each{|line| queue.push line}
    end
  end
end

if ENV['NOTIFY_SOCKET']
  sysd_notify = Socket.new(:UNIX, :DGRAM)
  sysd_notify.connect(Socket.pack_sockaddr_un(ENV['NOTIFY_SOCKET']))
  sysd_notify.puts('READY=1')
end

loop do
  cmdline = queue.pop
  segment_name, state_name = cmdline.split.map{|s|s.to_sym}
  (STDERR.puts "must provide a segment and a state"; next) if !segment_name || !state_name
  segment = segments[segment_name]
  (STDERR.puts "segment #{segment_name} does not exist"; next) if !segment
  color = segment.state(state_name)
  (STDERR.puts "segment #{segment_name} has no state #{state_name}"; next) if !color
  line.set(segment.start, segment.length, color)
  pixbar.set_line(line)
end
